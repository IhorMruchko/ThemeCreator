using Common.WPF;
using Microsoft.Win32;
using System;
using System.Collections;
using System.Collections.ObjectModel;
using System.IO;
using System.Linq;
using System.Text;
using System.Windows.Media;
using System.Xml;
using ThemeCreator.Model;

namespace ThemeCreator.ViewModels;

public class ResourceDictionaryViewModel : ViewModel
{
    private string? _lastFileOpenned;
    
    public bool HasFileOpenned => _lastFileOpenned is not null;

    public ObservableCollection<ColorBlock> Source { get; set; } = new ObservableCollection<ColorBlock>();

    public RelayedCommand OpenFileCommand => new(OpenFile);
    
    public RelayedCommand RefreshCommand => new(Refresh, _ => HasFileOpenned);
    
    public RelayedCommand AddCommand => new(Add);

    public RelayedCommand SaveCommand => new(Save, _ => HasFileOpenned);
    
    public RelayedCommand SaveAsCommand => new(SaveAs, _ => Source.Count > 0);

    public RelayedCommand DeleteCommand => new(Delete, HasSelectedItems);

    public RelayedCommand ClearCommand => new(Clear, HasSelectedItems);

    private void Clear(object? parameter)
    {
        if (parameter is not IList collection)
            return;

        collection.Clear();
    }


    public void Delete(object? parameter = null)
    {
        if (parameter is not IList collection)
            return;

        foreach (var colorBlock in collection.Cast<ColorBlock>().ToArray())
            Source.Remove(colorBlock);

    }

    private bool HasSelectedItems(object? parameter = null) => parameter is IList collection && collection.Count > 0;

    private void Refresh(object? parameter = null) 
        => ReadFromFile(_lastFileOpenned!);

    public void Save(object? parameter = null) 
        => File.WriteAllText(_lastFileOpenned!, GenerateResourceDictionary());

    private void SaveAs(object? parameter = null)
    {
        var saveFileDialog = new SaveFileDialog()
        {
            InitialDirectory = Environment.GetFolderPath(Environment.SpecialFolder.Desktop),
            Filter = "Xaml|*.xaml",
        };

        if (saveFileDialog.ShowDialog() == false)
            return;

        File.WriteAllText(saveFileDialog.FileName, GenerateResourceDictionary());
    }

    public void Add(object? parameter = null)
    {
        Source.Add(new ColorBlock()
        {
            Key = AutoGeneratedKey(),
            Value = Colors.Black
        });
    }

    private string AutoGeneratedKey() 
        => $"Color{Source.Count(block => block.Key.StartsWith("Color", StringComparison.InvariantCultureIgnoreCase)) + 1}";

    private void OpenFile(object? parameter)
    {
        var openFileDialog = new OpenFileDialog()
        {
            InitialDirectory = Environment.SystemDirectory,
            Filter = "Xaml|*.xaml",
            Multiselect = false,
        };

        if (openFileDialog.ShowDialog() == false)
            return;
        
        _lastFileOpenned = openFileDialog.FileName;
        ReadFromFile(openFileDialog.FileName);
    }

    private void ReadFromFile(string fileName)
    {
        var document = new XmlDocument();
        document.LoadXml(File.ReadAllText(fileName));
        var elements = document.GetElementsByTagName(nameof(SolidColorBrush));
        Source.Clear();
        
        for (var i = 0; i < elements.Count; ++i)
        {
            Source.Add(new ColorBlock()
            {
                Key = elements[i]?.Attributes?["x:Key"]?.Value ?? AutoGeneratedKey(),
                Value = (Color)ColorConverter.ConvertFromString(elements[i]?.Attributes?["Color"]?.Value)
            });
        }
    }

    private string GenerateResourceDictionary()
    {
        var builder = new StringBuilder(@"<ResourceDictionary xmlns=""http://schemas.microsoft.com/winfx/2006/xaml/presentation"" xmlns:x=""http://schemas.microsoft.com/winfx/2006/xaml"">").AppendLine();
        foreach(var item in Source)
        {
            builder.Append('\t').AppendLine(item.Generate());
        }
        builder.Append(@"</ResourceDictionary>");
        return builder.ToString();
    }

}
